---
title: "README"
output: gfm
always_allow_html: true
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-"
)
library(ipccheckr)
```

# `ipccheckr`: Utilities for analysing children's nutritional status 

<!-- badges: start -->
[![R-CMD-check](https://github.com/nutriverse/mwana/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/tomaszaba/ipccheckr/actions/workflows/R-CMD-check.yaml)
[![Codecov test coverage](https://codecov.io/gh/nutriverse/mwana/branch/main/graph/badge.svg)](https://app.codecov.io/gh/tomaszaba/ipccheckr?branch=main)
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
[![Project Status: WIP – Initial development is in progress, but there has not yet been a stable, usable release suitable for the public.](https://www.repostatus.org/badges/latest/wip.svg)](https://www.repostatus.org/#wip)
<!-- badges: end -->

## Background

`mwana`, for “child” in *Elómwè*, a local language spoken in the central-northern regions of Mozambique, with a similar meaning across various other Bantu languages, including Swahili, that is spoken in many parts of Africa, is a package designed for analysing acute malnutrition’s prevalence among “mwana”’s aged 6 to 59 months.

`mwana` was born out of the author’s frequent wrestle when, in his capacity as member of the Quality Assurance team for nutrition of the IPC, is frequently presented with the task of handling large datasets to conduct data quality and prevalence appraisal before every IPC analysis to ensure the use of reliable evidence in the analysis. The typical data appraisal workflow in the context of IPC is usually cumbersome, as it requires significant time and effort, whilst ensuring that the right analysis procedure is used by checking for different conditionals. Analysts often need to switch between software: SPSS or Excel for data processing, then import data into ENA for SMART software to run checks and prevalence analysis, then extract outputs into a summary spreadsheet. This process is repeated one by one for the number of units of analysis in the dataset. Oftentimes this workflow needs to be implemented in relatively short period time, leading to errors in the workflow due to fatigue.  

In this way, more than just an R-based implementation of the ENA for SMART software, mwana’s key added value lies in its ability to simplify the above alluded cumbersome workflow into a wholesome experience, all in one place. This is especially beneficial when handling large datasets, a day-to-day practice at IPC.

::: {.callout-note}
`mwana` was made possible thanks to the state-of-the-art work in nutrition survey guidance led by the SMART initiative. Click [here](https://smartmethodology.org) to learn more about the SMART initiative and their innovations.
:::

## What does `mwana` do?

It automates plausibility checks and prevalence analysis and respective summaries of the outputs.

### Plausibility checks. 

  + `mwana` performs plausibility checks on weight-for-height z-score (WFHZ)-based data. On this, it mimics the plausibility checkers in ENA for SMART software applies the same test scoring criteria and classification.  

  + It performs, as well, plausibility checks on MUAC data. For this, `mwana` integrates recent advances in using MUAC-for-age z-score (MFAZ) for auditing the plausibility of MUAC data. In this way, when variable age is available: `mwana` performs plausibility checks similar to those in WFHZ, however with few differences on the scoring and classification. Read details here. Otherwise, a similar test suit used in the current version of ENA is performed and returned. Read details here

#### Useful workflow for plausibility check
```{r ipccheckr_workflow, echo=FALSE, fig.align='default'}
DiagrammeR::grViz("
digraph mwana {
  # Default node attributes
  node [style = filled, color = lightblue, fontname = Helvetica, fontsize = 12];

  # Nodes
  node1 [label = 'Start', shape = ellipse, color = PaleGreen];
  node2 [label = 'Anthro data', shape = parallelogram];
  node3 [label = 'Check sample size requirements', shape = box];
  node4 [label = 'Met?', shape = diamond, color = lightgoldenrod];
  yes [label = 'Yes', shape = note]
  no [label = 'No', shape = note]
  
  # Nodes for YES branch ----
  node5 [label = 'Indicator', shape = diamond, color = lightgoldenrod];
  node6 [label = 'WFHZ', shape = note];
  node7 [label = 'MFAZ', shape = note];
  node8 [label = 'MUAC', shape = note];
  node9 [label = 'Process age', shape = box];
  node10 [label = 'Process data', shape = box];
  node11 [label = 'Check plausibility', shape = box];

  # Node for NO branch ----
  node12 [label = 'End of workflow', shape = oval, color = salmon];

  ## Data process ----
  node1 -> node2 [color = gray, arrowhead = vee];
  node2 -> node3 [color = gray, arrowhead = vee];
  node3 -> node4 [color = gray, arrowhead = vee];
  node4 -> no [color = gray, arrowhead = vee];
  no -> node12 [lable = 'NO', color = gray, arrowhead = vee];
  
  ## Workflow for Yes WFZH ----
  node4 -> yes [color = gray, arrowhead = vee]
  yes -> node5 [color = gray, arrowhead = vee];
  node5 -> node6 [color = gray, arrowhead = vee];
  node6 -> node9 [color = gray, arrowhead = vee];
  node9 -> node10 [color = gray, arrowhead = vee];
  node10 -> node11 [color = gray, arrowhead = vee];
  node11 -> node12 [color = gray, arrowhead = vee];
  
   ## Workflow for Yes MFAZ ----
  node5 -> node7 [color = gray, arrowhead = vee];
  node7 -> node9 [color = gray, arrowhead = vee];
  node9 -> node10 [color = gray, arrowhead = vee];
  node10 -> node11 [color = gray, arrowhead = vee];
  node11 -> node12 [color = gray, arrowhead = vee];
  
  ## Workflow for Yes MUAC ----
  node5 -> node8 [color = gray, arrowhead = vee];
  node8 -> node10 [color = gray, arrowhead = vee];
  node10 -> node11 [color = gray, arrowhead = vee];
  node11 -> node12 [color = gray, arrowhead = vee];
}
", width = 1000, height = 800)
```

### Prevalence analysis

`mwana` prevalence calculators were built to take decisions on the appropriate analysis approach to follow based on the quality of the data, as per the SMART rules. It returns an output table with the appropriate results based on the data quality test results. Fundamentally, the calculators loop over the survey areas in the dataset, whilst performing quality appraisal and takes decisions on the appropriate prevalence analysis to follow on the basis of the result. It computes prevalence for: 

  + Acute malnutrition based WFHZ and/edema (Read vignettes) 
  + Acute malnutrition based on the absolute values of MUAC and/or edema: here, when variable age is available, mwana applies MFAZ flags, otherwise it applies the flagging criteria around the absolute values of MUAC, to exclude outliers before computing prevalence, but the actual prevalence is done on the absolute values. (Read link to the specific section in the vignettes)
  + Acute malnutrition based on MFAZ and/edema: outliers excluded using MFAZ flags. (Read link to the specific section in the vignettes)
  + Acute malnutrition based on combined prevalence: here a concept of combined flags is used to streamline the flags removed in whz and those in MUAC. (Read link to the specific section in the vignettes)

`mwana` provides weighted prevalence analysis, if needed. This is possible in all calculators, including for MUAC, combined, which is not currently available in ENA. 

In the context of IPC AMN analysis workflow, `mwana` provides a handy function for checking if the minimum sample size requirements in a given area were met depending on the methodology used to collect the data: survey, screening or sentinel sites. (Check out the vignette).

::: callout-tip
if you are undertaking a research and you want to censor your data before including in your statistical models, etc, mwana is a great helper.
:::

::: callout-warning
Please note that `mwana` is still highly experimental and is undergoing a lot of development. Hence, any functionalities described below have a high likelihood of changing interface or approach as we aim for a stable working version.
:::

## Installation

`mwana` is not yet on CRAN but you can install the development version from [nutriverse R universe](https://nutriverse.r-universe.dev) as follows:

```{r install, eval = FALSE}
remotes::install_github("tomaszaba/ipccheckr")
```

Then load to in memory with
```{r example}
library(ipccheckr)
```

# Citation

If you were enticed to using `ipccheckr` package and found it useful, please cite using the suggested citation provided by a call to `citation` function as follows:

```{r citation}
citation("ipccheckr")
```

# Community guidelines  

Feedback, bug reports and feature requests are welcome; file issues or seek support [here](https://github.com/nutriverse/mwana/issues). If you would like to contribute to the package, please see our [contributing guidelines](https://nutriverse.io/mwana/CONTRIBUTING.html).  

This project is releases with [Contributor Code of Conduct](https://nutriverse.io/mwana/CODE_OF_CONDUCT.html). By participating in this project you agree to abide by its terms.
