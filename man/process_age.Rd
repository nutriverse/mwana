% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/age.R
\name{process_age}
\alias{process_age}
\title{Transform age in months and age in days with a data frame}
\usage{
process_age(df, svdate = NULL, birdate = NULL, age)
}
\arguments{
\item{df}{The input data frame.}

\item{svdate, birdate}{Vectors containing dates. \code{svdate} refers to the day, month
and year when the data was collected; while \code{birdate} refers to the date when the
child was born (birth-date). By default, both arguments are \code{NULL}. This is
makes \code{process_age()} work even in data sets where either survey date or birth-
data is not available, so the \code{process_age()} works on already given age variable.}

\item{age}{A numeric vector containing already given age in months, usually an
integer in the input data as it is estimated using local event calendars.
\code{age} will typically be available on a particular row when \code{birth_date} of
that same row is missing.}
}
\value{
A data frame of the same length as the input data frame, but of a
different width. If \code{svdate} or \code{birdate} are available, two new vectors are added
to the data frame: \code{age} in months with two decimal places and \code{age_day} which
is age in days with decimal two decimal places.
}
\description{
\code{process_age()} helps you get the variable age in the right format and ready
to be used for downstream workflow, i.e., get z-scores, as well as exclude
age values that are out-of-range.
}
\examples{

# Have a sample data ----
df <- data.frame(
survy_date = as.Date(c(
"2023-01-01", "2023-01-01", "2023-01-01", "2023-01-01", "2023-01-01")),
birthdate = as.Date(c(
"2019-01-01", NA, "2018-03-20", "2019-11-05", "2021-04-25")),
age = c(NA, 36, NA, NA, NA)
)

## Apply function ----
df |>
process_age(svdate = "survy_date", birdate = "birthdate", age = age)

}
